










--> OK... AGORA VAMOS COMECAR COM O PROBLEMA...














-> SE VC USA O AWS E NAO PLANEJA SER 1 AWS EXPERT,



TALVEZ QUEIRA APENAS COLOCAR 1 SITE UP AND RUNNING...









-> OU ENTAO VC TEM 1 CERTA TASK 

QUE VC QUER EXECUTAR NA TASK,

PQ VC ESCUTOU QUE A CLOUD É GREAT...











--> SE VC É ESSE TIPO DE USER,

O AWS PODE SER SUPER OVERWHELMING... ( É OVERWHELMING ATÉ MESMO PARA EXPERTS)...











-> MAS SE SEU OBJETIVO NAO É 


SE TORNAR 1 AWS EXPERT,

VC NUNCA SAI DESSE ESTÁGIO DE 


FICAR OVERWHELMED..














--> VC VE QUE O EC2 




É BOM PARA RODAR WORKLOADS --> É OVERWHELMING...












-> VC PRECISA RODAR 1 INSTANCE... MTAS OPTIONS... -> AS COISAS PODEM FICAR 


REALLY TRICKY..











---> É CLARO QUE O AWS TEM 

OUTROS COMPETIDORES... -> TAMBÉM SMALLER HOSTING PROVIDERS,

QUE 

PROVIDENCIAM SIMPLE SOLUTIONS, PARA 

PROBLEMAS SIMPLES...















POR EXEMPLO,

O HEROKU --> É UMA PLATFORM QUE DEIXA O RUN DE WORKLOADS,

COMO WEBSERVERS (mas também outros workloads),


BEM EASY...













-> E É CLARO QUE O AWS NAO QUER PERDER 

BUSINESS 


A COMPETIDORES COMO ESSES...





-> E É POR ISSO QUE ELE OFERECE VÁRIOS SERVICES 


DE SIMPLIFICATION, 



BUNDLES DE SERVICES, QUE DEIXAM TUDO MAIS FÁCIL...















-> E 1 KEY SERVICE OFERECIDO PELO AWS,

QUE SIMPLIFICA CERTAS COISAS,

É O AWS BEANSTALK... QUE SIMPLIFICA O DEPLOY DE WEB APPS,




E WORKLOADS EM GERAL, NA CLOUD..












ELASTIC BEANSTALK --> É UM __ ""sIMPLIFIED APP DEPLOYMENT SERVICE""











--> A IDEIA POR TRÁS DELE É QUE PODEMOS CONFIGURAR 

TODOS OS ASPECTOS RELACIONADOS A APP/WEB DEPLOYMENT EM APENAS 

1 ÚNICO LUGAR...









-> QUER DIZER QUE PODEMOS CONFIGURAR O ENVIRONMENT TODO,

QUE INCLUI EC2 INSTANCES, LOAD BALANCING, DATABASE,




EM 1 ÚNICO LUGAR, DE UMA MANEIRA MENOS OVERWHELMING...














-> PARA ISSO, COM O BEANSTALK,

VC CRIA ""APPLICATIONS'",




QUE SAO ELEMENTOS QUE INCLUEM 


_ ENVIRONMENTS... EM QUE VC DEFINE:






1) QUAL PROGRAMMING LANGUAGE DEVE SER USADA....









2) COMO O GENERAL ENVIRONMENT DEVE SE PARECER...








VOCE PODE ESCOLHER 1 PRESET,

E ENTAO AJUSTAR 

ESSE PRESET 


DE ACORDO...









--> AS EC2 INSTANCES SAO USADAS, UNDER THE HOOD,


E POR ISSO VC 

CONFIGURA 

INSTANCE TYPES E SECURITY SETTINGS....  --> MAS O WIZARD
 


 PARA FAZER ISSO 


 PROVIDENCIA MENOS 
 OPTIONS 
 DO QUE O 

 WIZARD DO EC2 (é menos overwhelming)...









 E ESSE CONSOLE TAMBÉM TE DEIXA ADICIONAR 

 LOAD BALANCING, DATABASES, SCALING E ETC 


SE NECESSÁRIO, 


MAS TUDO É APRESENTADO




DE UMA MANEIRA MENOS OVERWHELMING...
 




 É MAIS FÁCIL DE ENTENDER,



 E É MAIS FÁCIL DE MANAGEAR TODOS ESSES 


 SERVICES E COISAS, TUDO DE 1 PAGE SÓ..












 --. É CLARO QUE, UNDER THE HOOD,


 OUTROS AWS 

 SERVICES 


 SAO LEVERAGED (exatamente como no caso do amplify),








 MAS É MAIS FÁCIL DE COMECAR COM TODAS ESSAS COISAS...









 --> VC TAMBÉM PODE CONFIGURAR COMO SEU APP CODE 

 DEVE SER UPDATADO,
 E COMO 

 DEVE SER DEPLOYADO...













 --> ACESSAMOS ESSA PAGE COM O MANAGEMENT CONSOLE....








 -> OK... AÍ PODEMOS  CRIAR NOSSO APP (dar 1 nome),



 ESCOLHER A PROGRAMMING LANGUAGE E A VERSION DA 

 PROGRAMMING LANGUAGE..













 ---> AÍ PODEMOS ESCOLHER ENTRE USAR UM PRESET (SAMPLE APPLICATION)


 OU PROVIDENCIAR NOSSO PROPRIO CODE...











 -> AI VOCE 



 ESCOLHE O ENVIRONMENT QUE VC QUER... -> QUAL PRESET...









 -> TEMOS ESTES PRESETS:



 1) SINGLE INSTANCE (FREE TIER ELIGIBLE)



2) SINGLE INSTANCE (USANDO SPOT INSTANCE) 



3) HIGH AVAILABILIY 


4) HIGH AVAILABILITY (USANDO SPOT E ON-DEMAND INSTANCES)




5) CUSTOM CONFIGURATION..











--> TAMBÉM PODEMOS ESCOLHER O HIGH AVAILABILITY,

QUE TE DÁ 

SCALING E LOAD BALANCING 

DIRETO OUT OF THE BOX... 











-> VC TAMBÉM PODE CONFIGURAR OUTRAS COISAS,

COMO O LOGGING DEVE ACONTECER,

ETC...









- TAMBÉM PODE ADICIONAR ENVIRONMENT VARIABLES...













--> TAMBÉM PODE CONTROLAR ""QUAIS INSTANCES SAO USADAS, UNDER THE HOOD""...











-> VC TAMBÉM PODE ESCOLHER  O SEU AMI....












-> VC GANHA SENSIBLE DEFAULTS OUT OF THE BOX....










-> VC AINDA TEM MT CONTROLE, AQUI,

MAS VC FICA 



__ COM __ MAIS SETTINGS FILLED IN OUT OF THE BOX....



E TUDO 

FICA AGRUPADO 





EM LOGICAL GROUPS....









--> TUDO PARA SER MAIS FÁCIL O CONFIGURE DO OVERALL APP ENVIRONMENT...









VC TAMBÉM PODE ADICIONAR FACILMENTE 1 DATABASE 

A ESSE PROJETO --> DATABASE SQL RDS...








-> VOCE PODERIA ADICIONAR 1 DATABASE... ISSO, POR TRAS DAS CENAS,

USARIA 

RDS 
PARA ADICIONAR UMA NOVA DATABSE....






-> OK.... O ELASTIC BEANSTALK CRIA OS 

RESOURCES 


AWS, POR TRAS DAS CENAS...














COMPARADO COM O AMPLIFY,



O BEANSTALK FOCA __ REALMENTE _NO APP QUE VC QUER DEPLOYAR 

NA CLOUD... JÁ 


O AMPLIFY FOCA MAIS NO FRONTEND,





NOS FRONTEND APPS,

QUE TALVEZ PRECISEM DE 1 CLOUD BACKEND À PARTE.....












-> MAS COM O AMPLIFY, VC BASICAMENTE CRIA O APP COM 

O AMPLIFY...









-> MAS COM O BEANSTALK, É DIFERENTE:

VC JA TEM A APPLICATION,


E AÍ 

SIMPLESMENTE 


CRIA _ O ENVIRONMENT PARA RODAR ESSE APP,

NA CLOUD...