









--> OK... ACABAMOS COM ESSA COURSE SECTION...








APRENDEMOS SOBRE DATABASES..











APRENDMOS QUE O AWS OFERECE DIFERENTES DATABASE SERVICES...









--> APRENDEMOS QUE PODEMOS:






1) SE QUISERMOS,

TER SELF-HOST DE DATABASES --> BASTA SE CONECTAR A 1 EC2 

INSTANCE QUE 
CRIAMOS,

AÍ INSTALAR DATABASE SOFTWARE 

NELA,

E AÍ 


STARTAR 1 DATABASE NELA... NADA DE ERRADO COM ISSO...









2) MAS APRENDEMOS QUE PODEMOS 


USAR MANAGED SERVICES... E ISSO, FREQUENTEMENTE,

PODE SER MAIS FÁCIL E TE SALVAR 

DE 
DORES 

DE CABEÇA...







3) QUANTO AOS MANAGED SERVICES,

VC TEM UMA AMPLA VARIEDADE DE SERVICES...







4) SQL -> (RDS, dentre eles o AURORA, que é um TYPE DE ENGINE 
QUE VC PODE ESCOLHER, DENTRO DO RDS)...








5) NOSQL --> UM DELES É O DYNAMODB --> É UM KEY-VALUE STORE (e é diferente de mongodb, é 
                                                                mais simples do que o mongodb, pq nao tem nesting)




6) NOSQL --> TEMOS TAMBÉM O DOCUMENTDB --> É PRATICAMENTE O MONGODB DA AMAZON...






7) ELASTICACHE -> USADO PARA ADICIONAR 1 CACHING LAYER A NOSSAS DATABASES PRIMÁRIAS (databases SQL, RDS)...















TEMOS TODAS ESSAS DIFERENTES DATABASES PQ 
DIFERENTES 


WORKLOADS 

SE BENEFICIAM 
DE 

DIFERENTES 

DATABASES...












-> MAS NEM SEMPRE 


É SEU TRABALHO ESCOLHER 1 DESSES TYPES...















9) RDS, AURORA E ELASTICACHE -->  TODOS ELES SÃO MANAGED RELATIONAL DATABASE SERVICES...





NO FINAL DAS CONTAS, COM ELES,

FAZEMOS SPIN UP DE INSTANCES DE DATABASE _ QUE SAO MANAGEADAS PELO AWS...







--> NELES, VC CONFIGURA _ DATABASE CLUSTER HARDWARE,

NETWORK 

E BEHAVIOR... (mas nao a instance ec2 em que rodam)..






--> DEPOIS,

VC 


GERENCIA O BUILT-IN SCALING,

AVAILABILITY ( REPLICATION) E OUTRAS FEATURES,





O QUE QUER DIZER QUE NAO PRECISAMOS COPIAR DATA ENTRE AS INSTANCES 


MANUALMENTE,

PQ 

O AWS FAZ ISSO PARA NÓS...






--> PARA O AURORA,


VC TAMBÉM TEM A OPTION DE SERVERLESS,


PARA AINDA MAIOR FLEXIBILIDADE...














--> QUANDO O ASSUNTO É O ACESSO A ESSAS DATABASSES,


VC FAZ ISSO POR MEIO DE:



1) HTTP ENDPOINTS 



2) SQL QUERIES 




3) PARA O ELASTICACHE,

VC 
USA OS QUERY COMMANDS DO ELASTICACHE...







--> ou seja,

FAZEMOS TUDO ISSO, COM O RDS, AURORA E ELASTICACHE,




POR __ MEIO _ DE STANDARD QUERY TECHNIQUES (
    e nao por meio 

    de COMANDOS 
    AWS...
)












JÁ PARA __ DATABASES CONSTRUÍDAS ESPECIFICAMENTE 
PARA O AWS,


COMO O DYNAMODB 


E 
OUTRAS,

VC 


USA __ COMANDOS AWS... (e nao sql queries)..











--> DYNAMODB -> É UM KEY-VALUE DATABSE,


HIGH-PERFORMANCE, E É MANAGED...






-> COM O DYNAMODB,

TEMOS A PARTITION KEY,


E AÍ

SETTAMOS A WRITE E READ CAPACITY... ISSO QUANDO DEFINIMOS/CRIAMOS 1 TABLE...








-> NO DYNAMODB, NAO CRIAMOS INSTANCES,

E SIM APENAS TABLES....








-> POR FIM,


VC 

PODE ACESSAR 
O DYNAMODB 


E FAZER O FETCH E WRITE DE DATA 


_ POR MEIO __ 


DOS AWS APIs ou SDKs, ou CLI... -> ou seja,



POR MEIO 
DOS COMANDOS 
AWS... (nao existe query language oficial)...












--> POR FIM,

TEMOS DATABASES COMO O NEPTUNE,

QUE PODEM SER INTERESSANTES 
PARA 



WORKLOADS ESPECÍFICOS... E QUE SAO CRIADOS 

PELO AWS 
PARA 

TE 

DAR 



1 AMPLA VARIEDADE 
DE 



DATABASES..