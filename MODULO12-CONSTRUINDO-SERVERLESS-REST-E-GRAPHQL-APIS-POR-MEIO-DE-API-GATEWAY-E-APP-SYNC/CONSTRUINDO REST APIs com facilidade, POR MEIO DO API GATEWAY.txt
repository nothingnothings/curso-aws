











--> OK... MAS O QUE É ESSE SERVICE DE API GATEWAY...









É UM SERVICE 


PROVIDENCIADO PELO AWS QUE TE AJUDA 

A CONSTRUIR 
REST 
APIs 



SEM 


ESCREVER MT CÓDIGO....










--> É UM MANAGED REST API SERVICE...













--> É UM ÓTIMO SERVICE PQ 


ELE TE DEIXA CONSTRUIR UMA API SEM _ TER  DE ESCREVER __ 

TODO O CÓDIGO BOILERPLATE 



QUE VC GERALMENTE TEM DE ESCREVER PARA ISSO..










-> COM O API GATEWAY,

VC EM VEZ DISSO PODE FOCAR APENAS 


NO WRITE DO CÓDIGO QUE DEVE SER EXECUTADO 

NO MOMENTO EM QUE 


O REQUEST CHEGA,


MAS VC NAO PRECISA ESCREVER O CÓDIGO QUE HANDLA O HTTP REQUEST 

IN THE FIRST PLACE (


OU SEJA,

VC NAO PRECISA 

ESCREVER O CÓDIGO QUE 

FILTRA O REQUEST, CHECA O REQUEST E COISAS ASSIM...


)












EM VEZ DISSO,

VC FOCA 

NO CÓDIGO QUE 

DEVE SER EXECUTADO, NO FINAL DAS CONTAS,

PARA OS CHECKED AND FILTERED REQUESTS..













-> COM O API GATEWAY,

DEFINIMOS:








1) A API STRUCTURE DO SEU PROJETO -> OU SEJA, OS PATHS E HTTP METHODS QUE VC QUER SUPORTAR...








2) VC PODE ENFORCE QUERY PARAMETERS E AUTHENTICATION ---> TUDO ISSO PODE SER FEITO 
                                                            POR ESSE SERVICE...
                                                            PODE SER UMA GRANDE SIMPLIFICATION 
                                                            DO SEU APP...





3) VOCE __ DEVE __ DEFINIR RESPONSE CODES,

E ENTAO FAZER _ ENFORCE__ DE CERTOS SCHEMAS,

PARA ESTRUTURAR RESPONSES/REQUESTS...







4) FINALMENTE,

VC DEFINE COMO _ REQUESTS_ DEVEM SER HANDLADOS... -> OU SEJA,

VC DEFINE RULES PARA O PARSING E HANDLING DE REQUESTS... --> EXTRAIR DATA AUTOMATICAMENTE 

DE REQUESTS...







5) POR FIM,

VC PODE CONFIGURAR A RESPONSE CREATION E A FORWARDING LOGIC --> OU SEJA,


VC 



DEFINE O CÓDIGO QUE DEVE SER EXECUTADO  PARA __ ENTAO __ 


GET THE DATA QUE DEVE SER 

ENVIADA COMO RESPONSE...








-> NA CRIACAO DA RESPONSE,

É MT COMUM USAR O LAMBDA,

PQ 

O 

LAMBDA É ESSE ON-DEMAND CODE EXECUTION --> E FAZ MT SENTIDO 






""ONCE A REQUEST HAS BEEN PARSED AND CHECKED,

CHECKED THAT A USER IS AUTH,

YOU EXECUTE A LAMBDA FUNCTION THAT, FOR EXAMPLE, FETCHES 

DATA _ FROM A DATABASE, TO THEN HAND THAT DATA BACK TO API GATEWAY"...





-->_ O API GATEWAY ENTAO PEGA ESSA DATA, QUE  FOI RETRIEVADA PELO LAMBDA,


EM 1 RESPONSE QUE ENTAO É SENT BACK AO CLIENT QUE ENVIOU O REQUEST --> QUER DIZER QUE 


ESSE ""RESPONSE SENDING"" SERIA TAKE CARE OF  PELO API GATEWAY...

















--> OK... E O API GATEWAY TAMBÉM HANDLA OUTRAS FEATURES...








--> O API GATEWY 



TAMBÉM TEM A FEATURE DE 




""HANDLE REAL-TIME CONNECTIONS"" (WEBSOCKETS)...














OK... MAS ALÉM DE SETTAR TODA ESSA API-RELATED LOGIC COM O API GATEWAY,



ELE TAMBÉM 
TEM FEATURES QUE:




1) AJUDAM COM O TEST E DEPLOYMENT... SIMPLIFICAM O TEST E DEPLOY DE SUA API..








2) VOCE PODE TESTAR DURANTE DEVELOPMENT --> VC FAZ ISSO COM ALGUNS CLICKS 

NO MANAGEMENT CONSOLE,

SEM ENVIAR ACTUAL REQUESTS..







3) VC TAMBÉM PODE DEPLOYAR SUA API COM FACILIDADE,


PQ __ ELE TAMBÉM SUPORTA _ _""""STAGES'""",


o que 

quer dizer que 

PODEMOS 

DEPLOYAR 

MÚLTIPLAS VERSIONS DE NOSSA API SIMULTANEAMENTE (


isso torna possível a ideia de 
""múltiplas versions de nossa API,

sendo usadas por diferentes clients"",

etc...

)












COMO SEMPRE, ESSE SERVICE PODE SER ATINGIDO DO CONSOLE....














-> ELE É UM REGIONAL SERVICE... QUER DIZER QUE VC PODE TER 


DIFERENTES APIs,

EM DIFERENTES REGIONS...












-> E QUANDO VC CONSTROI 1 API,



VC TEM A OPCAO ENTRE:




1) HTTP API 




2) websocket api (PERSISTENT CONNECTIONS.. É TIPO O GITHUB... REAL-TIME CASES, SUCH AS CHAT APPLICATIONS OR DASHBOARDS)..







3) REST API...

















HTTP E REST APIS 


SAO 

BEM SIMILARES... 









--> HTTP --> É MAIS SIMPLES..








REST --> É MAIS FEATURE-RICH,
E TE DÁ 

TODAS AS FEATURES PRINCIPAIS DO LAMBDA...















OK... MAS O QUE INTERESSA É QUE ISSO TUDO É ALL ABOUT O CREATE 

DE REST APIs.....












ESCOLHA ""LAMBDA'" PARA HANDLAR HTTP REQUESTS QUE FORAM FILTRADOS E PROCESSADOS 

PELA API....












EM CONFIGURE ROUTES,

VC DEFINE 

QUAIS TIPOS DE PATH VC QUER SUPORTAR,
PARA QUAIS 

TIPOS DE HTTP METHODS... E ENTAO 

QUAL 


LAMBDA FUNCTION DEVE SER EXECUTADA,

PARA CADA GIVEN PATH...













-. ESSA É A IDEIA POR TRÁS DISSO...








-> E VC PODE CONSTRUIR 1 API A PARTIR DE ALGUNS CLIQUES,


EM VEZ DE ESCREVER E RODAR ESSE CÓDIGO EM 1 SERVER EXTRA... 











-> PQ ESSA É A ALTERNATIVA --> PQ SE VC ESCREVE SEU PRÓPRIO CODE,

VC 

TAMBÉM 

TEM DE RODAR 

ESSE CODE EM ALGUM SERVER (quer 

dizer que 

será necessário 
rodar 1 EC2 INSTANCE PARA ISSO,
OU UM CONTAINER...

)








-> MAS COM O API GATEWAY,
VC PODE SALVAR COSTS SEM TER DE RODAR ESSAS EC2 INSTANCES...











PRICING PAGE --> O API GATEWAY PODE 

SER 

STARTADO DE GRACA --> MAS A PARTIR DE CERTO LIMITE, ELE PASSA A CUSTAR DINHEIRO...











O LIMITE É 1 MILHAO DE CHAMADAS DE API POR MES...