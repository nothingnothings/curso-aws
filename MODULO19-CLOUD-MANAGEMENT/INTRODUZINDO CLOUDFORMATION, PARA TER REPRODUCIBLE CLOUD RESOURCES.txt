







--> OK... OUTRO PROBLEMA QUE VC PROVAVELMENTE ENFRENTARÁ QUANDO 



SUA COMPANY/BUSINESS CRESCER,

É QUE 

AS COISAS PODEM FICAR CUMBERSOME  E ERROR PRONE SE VC 

COMECAR 

A STARTAR E CONFIGURAR TUDO MANUALMENTE...













-> SE VC COMECAR A STARTAR TODAS AS EC2 INSTANCES MANUALMENTE,

ISSO PODE FICAR CUMBERSOME RAPIDAMENTE...








DESVANTAGENS:




1) REPETITIVE E SLOW 





2) ERROR-PRONE E HARD TO DEBUG 






3) POSSIBLY DIFFERENT SOLUTIONS FOR THE SAME 
PROBLEM...









""CREATING CLOUD RESOURCES (i.e using cloud services) manually 
is great for getting started, basic use-cases, etc."""





BUT FOR LARGE COMPANIES AND COMPLEX USE-CASES,

ITS TYPICALLY NOT THE BEST SOLUTION...













--> É MAIS RÁPIDO IR POR DENTRO DO CONSOLE,


MAS AINDA É ERROR-PRONE.... E DIFERENTES USERS 

PODEM INVENTAR DIFERENTES SETTINGS..










--> VOCE PODERIA ESCREVER SEUS PRÓPRIOS CUSTOM SCRIPTS PARA 
STANDARDIZAR O DEPLOY DE RESOURCES,

MAS O 


___AWS __ TEM 

1 SERVICE 


AINDA MELHOR DO QUE ISSO..

















-> O SERVICE DA AWS PARA ISSO É O 



__CLOUD FORMATION__.... --> O CLOUD FORMATION 


TE DEIXA __ MANAGEAR__ SEUS CLOUD RESOURCES 



___ COMO CÓDIGO.... QUER DIZER QUE 

ELE TE DÁ 

ESSA FEATURE 





DE """"INFRAESTRUTURA COMO SE FOSSE CÓDIGO"">..








QUER DIZER QUE 

O CLOUD RESOURCE TE DEIXA ESCREVER TEMPLATES,


EM QUE 


É POSSÍVEL DECLARAR E MODELAR 

TODA 

SUA CLOUD STRUCTURE,


DECLARATIVAMENTE...










--. BASTA USAR A CLOUDFORMATION LANGUAGE (COM YAML),



PARA__ DEFINIR _ QUAIS TIPOS DE SERVICES DEVEM SER STARTADOS 

E USADOS,

COM QUAL TIPO DE CONFIGURATION...








--> E VC PODE _ DEFINIR __ DEPENDENCIES ENTRE ESSES SERVICES,

OU ENTAO 

DEIXAR ESPACO PARA DYNAMIC PARAMETERS,

QUE ENTAO PODERAO SER SETTADOS 

SEMPRE QUE 


1 TEMPLATE FOR USADO __ PARA _ ACTUALLY CRIAR RESOURCES 

COM BASE NELE...













--> COM OS CLOUDFORMATION TEMPLATES,

VC 

OS CRIA, E AÍ OS EDITA...









--> ASSIM QUE 1 TEMPLATE FOI DEFINIDO,
ELE PODE SER USADO/INSTANCIADO __ MÚLTIPLAS VEZES...









--> PODEMOS USAR E INSTANCIAR ESSE TEMPLATE 

ATÉ MESMO EM DIFERENTES CONTAS,




__ PARA __ CRIAR __ O EXACT SAME SET DE 
SERVICS,


MÚLTIPLAS VEZES...











--> VC FICA COM NENHUM ERRO,
 
 PQ 

 VC FICA COM A EXATA MESMA CONFIGURACAO...








--> TUDO FICA ESCRITO NO TEMPLATE,


QUE PODE SER ESCRITO POR 1 DEDICATED TEAM,

PODE SER ARMAZENADO EM 1 CENTRAL PLACE, ETC..









----> VOCE PODE ATÉ MESMO AUTOMATIZAR INFRASTRUCTURE DEPLOYMENTS 

E UPDATES...










--> PQ QUANDO VC FAZ UPDATE DE 1 TEMPLATE E FAZ REDEPLOY,



OS AWS SERVICES AFETADOS POR ELE SERAO UPDATADOS DE ACORDO...







--> PODEMOS TAMBEM DEFINIR WORKFLOWS EM QUE 

DIFERENTES TEMPLATES SAO INSTANCIADOS,



A DEPENDER DE DIFERENTES REGIONS/ACCOUNTS...













QUER DIZER QUE O CLOUDFORMATION PODE DEIXAR 



SEUS CLOUD INFRASTRUCTURE DEPLOYMENTS 

MAIS PLANNABLE E RELIABLE,


E MAIS REPRODUCIBLE,




SEM CHANCE PARA ERROS..














--> ASSIM QUE VC USA 1 TEMPLATE,

DIFERENTES USERS NAO PODEM ACIDENTALMENTE CRIAR 


DIFERENTES VERSIONS DE 1 MESMA INFRASTRUCTURE,

PQ 


TUDO FICA ESCRITO NO TEMPLATE, O QUE É ÓTIMO....














--> É CLARO QUE NEM TODAS AS PESSOAS QUE TRABALHAM COM O AWS 


DEVEM SABER COMO ESCREVER ESSES TEMPLATES..










--> PQ O CLOUDFORMATION EXIGE QUE VC SAIBA SUA PRÓPRIA LANGUAGE...











--> MAS VC PODE MEXER COM O CLOUDFORMATION DESIGNER,


COMO ALTERNATIVA... -> PARA TER UMA GUI



QUE TE MOSTRA O QUE VC VAI QUERER --> PARA CONSTRUIR 1 INFRASTRUCTURE 

COM ESSA 

DESIGNER TOOL,
 

 PARA CONSEGUIR 

 1 TEMPLATE COMO RESULT...









--> DEVS MAIS EXPERIENTES NAO VAO USAR ESSA TOOL...











--> MAS ESSA TOOL EXISTE..









--> E, POR EXEMPLO,

É 1 CLOUDFORMATION TEMPLATE QUE É USADO QUANDO VC 

CRIA 


1 


""""STANDARDIZED CLOUD PRODUCT"""",

com o """service catalog"" service -->  PQ LÁ 


NÓS PODEMOS USAR 1 CLOUDFORMATION TEMPLATE PARA DESCREVER 

A INFRASTRUCTURE QUE DEVE SER USADA 


POR ESSE PRODUCT..












A IDEIA DO SERVICE CATALOG  É JUSTAMENTE 
ENTREGAR 

AOS USERS DE SEU CLOUD ENVIRONMENT/ACCOUNT UMA MANEIRA 

MAIS FÁCIL DE 

INSTANCIAR ESSES TEMPLATES CLOUDFORMATION... -> DEIXA ELES 

PEGAREM 


1 PRODIUCT DA LISTA DE PRE-DEFINED PRODUCTS,




E AÍ 

OS DETAILS JÁ ESTARAO 

TODOS DEFINIDOS NESSE CLOUDFORMATION TEMPLATE, USADO UNDER THE HOOD...